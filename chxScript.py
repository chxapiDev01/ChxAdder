# Encrypted Script
import base64
def xor(data, key='Chxkrishna'):
    return ''.join(chr(ord(c)^ord(key[i%len(key)])) for i, c in enumerate(data))

exec(xor(base64.b64decode("").decode()))
